#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the active virtualenv
#    * the branch of the current git/mercurial repository
#    * the return value of the previous command
#    * the fact you just came from Windows and are used to having newlines in
#      your prompts.
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.bashrc or ~/.bash_profile:
#        . ~/.bash_prompt
#
# LINEAGE:
#
#   Based on work by woods
#
#   https://gist.github.com/31967
 
# The various escape codes that we can use to color our prompt.
       BLACK="\[\033[0;30m\]"
         RED="\[\033[0;31m\]"
       GREEN="\[\033[0;32m\]"
       BROWN="\[\033[0;33m\]"
        BLUE="\[\033[0;34m\]"
      PURPLE="\[\033[0;35m\]"
        CYAN="\[\033[0;36m\]"
  LIGHT_GRAY="\[\033[0;37m\]" 
   LIGHT_RED="\[\033[1;31m\]"
 LIGHT_GREEN="\[\033[1;32m\]"
      YELLOW="\[\033[1;33m\]" 
  LIGHT_BLUE="\[\033[1;34m\]"
LIGHT_PURPLE="\[\033[1;35m\]"
  LIGHT_CYAN="\[\033[1;36m\]"
       WHITE="\[\033[1;37m\]"
  COLOR_NONE="\[\e[0m\]"

CHAR_DIRTY="\316\273"
 
# determine git branch name
function parse_git_branch(){
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

function set_git_state(){
  result=$(git status 2>/dev/null --porcelain|tail -n 1)
  if [ "$result" == "" ]
  then
    state=""
  else
    state="${BROWN}${CHAR_DIRTY} ${COLOR_NONE}"
  fi
}

function set_hg_state(){
  result=$(hg st 2>/dev/null|tail -n 1)
  if [ "$result" == "" ]
  then
    state=""
  else
    state="${BROWN}${CHAR_DIRTY} ${COLOR_NONE}"
  fi
}
 
# determine mercurial branch name
function parse_hg_branch(){
  hg branch 2> /dev/null | awk '{print " (" $1 ")"}'
}
 
# Determine the branch/state information for this git repository.
function set_git_branch() {
  state=""
  # Get the name of the branch.
  branch=$(parse_git_branch)
  # if not git then maybe mercurial
  if [ "$branch" != "" ]
  then
    set_git_state
  else
    branch=$(parse_hg_branch)
    if [ "$branch" != "" ]
    then
      set_hg_state
    fi
  fi
 
  # Set the final branch string.
  BRANCH="${YELLOW}${branch}${COLOR_NONE} "
}
 
# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="^_^ †"
  else
      PROMPT_SYMBOL="${RED}(╯°□°）╯︵ ┻━┻ †${COLOR_NONE}"
  fi
}
 
# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${GREEN}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
  fi
}
 
# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?
 
  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv
 
  # Set the BRANCH variable.
  set_git_branch

  # Set the bash prompt variable.
  PS1="
${PYTHON_VIRTUALENV}${BLUE}\w${COLOR_NONE}${BRANCH}${state}${COLOR_NONE}${PROMPT_SYMBOL} "
}
 
# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

